package com.crossover.techtrial.controller;

import com.crossover.techtrial.dto.DailyElectricity;
import com.crossover.techtrial.model.HourlyElectricity;
import com.crossover.techtrial.model.Panel;
import com.crossover.techtrial.service.HourlyElectricityService;
import com.crossover.techtrial.service.PanelService;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

/**
 * Panel Controller for all Rest APIs related to Panel.
 * 
 * @author Crossover
 *
 */

@RestController
public class PanelController {

	@Autowired
	PanelService panelService;

	@Autowired
	HourlyElectricityService hourlyElectricityService;

	/**
	 * Register a Panel to System and start receiving the electricity statistics.
	 * 
	 * @param panel
	 *            to register.
	 * @return
	 */
	@PostMapping(path = "/api/register")
	public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {
		panelService.register(panel);
		return ResponseEntity.accepted().build();
	}

	/**
	 * Controller Method to save hourly Electricity to Database.
	 * 
	 * @param panelSerial
	 *            Serial number of Panel.
	 * @param hourlyElectricity
	 *            generated electricity for this panel.
	 * @return
	 */

	@PostMapping(path = "/api/panels/{panel-serial}/hourly")
	public ResponseEntity<?> saveHourlyElectricity(@PathVariable(value = "panel-serial") String panelSerial,
			@RequestBody HourlyElectricity hourlyElectricity) {

		return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
	}

	/**
	 * Get Hourly Electricity from Previous dates.
	 */

	@GetMapping(path = "/api/panels/{panel-serial}/hourly")
	public ResponseEntity<?> hourlyElectricity(@PathVariable(value = "panel-serial") String panelSerial,
			@PageableDefault(size = 5, value = 0) Pageable pageable) {
		Panel panel = panelService.findBySerial(panelSerial);
		if (panel == null) {
			return ResponseEntity.notFound().build();
		}

		Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(panel.getId(),
				pageable);

		return ResponseEntity.ok(page);
	}

	/**
	 * This end point is used by Front end charts component to plot the daily
	 * statistics of electricity generated by this Panel from the day it registered
	 * to end of previous day.
	 * 
	 * @param panelSerial
	 *            is unique serial for this Panel.
	 * @return
	 */

	@GetMapping(path = "/api/panels/{panel-serial}/daily")
	public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
			@PathVariable(value = "panel-serial") String panelSerial
			) {
		List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
		try {
			/**
			 * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED
			 * CLASSES. MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO
			 * PAGINATION IS NEEDED HERE.
			 */

			//  
			
			Pageable pageable  = null;

			Panel panel = panelService.findBySerial(panelSerial);
			if (panel == null) {
				return ResponseEntity.notFound().build();
			}

			Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(panel.getId(),
					pageable);
			Map<LocalDate, List> hourlyElecMap = new HashMap<>();

			Iterator hourlyElectricityList = page.iterator();
			while (hourlyElectricityList.hasNext()) {
				HourlyElectricity he = (HourlyElectricity) hourlyElectricityList.next();

				LocalDateTime today = LocalDateTime.of(LocalDate.now(), LocalTime.now());

				int dayDiff = today.getDayOfYear() - he.getReadingAt().getDayOfYear();

				if (dayDiff > 1) {
					if (hourlyElecMap.size() > 0 && hourlyElecMap.get(he.getReadingAt().toLocalDate()) != null) {
						List<HourlyElectricity> hourlyElecDayList = hourlyElecMap.get(he.getReadingAt().toLocalDate());
						hourlyElecDayList.add(he);

						hourlyElecMap.put(he.getReadingAt().toLocalDate(), hourlyElecDayList);

					} else if (hourlyElecMap.size() == 0 || hourlyElecMap.size() > 0) {
						List<HourlyElectricity> hourlyElecDayList = new ArrayList();
						hourlyElecDayList.add(he);

						hourlyElecMap.put(he.getReadingAt().toLocalDate(), hourlyElecDayList);
					}

				}
			}

			// Iterate through hourlyElecMap to find avg, sum, min , max

			Iterator<Map.Entry<LocalDate, List>> iterator = hourlyElecMap.entrySet().iterator();
			while (iterator.hasNext()) {

				Map.Entry<LocalDate, List> entry = iterator.next();
				List hourlyElecDayList = entry.getValue();
				DailyElectricity de = new DailyElectricity();
				de.setDate(entry.getKey());

				Iterator hourElecListIter = hourlyElecDayList.iterator();
				int listsize = 0;
				long min = 0;
				long max = 0;
				long sum = 0;

				listsize = hourlyElecDayList.size();

				while (hourElecListIter.hasNext()) {
					HourlyElectricity he = (HourlyElectricity) hourElecListIter.next();

					if (min == 0) {
						min = he.getGeneratedElectricity();
					} else if (min > he.getGeneratedElectricity()) {
						min = he.getGeneratedElectricity();
					}

					if (max == 0) {
						max = he.getGeneratedElectricity();
					} else if (max < he.getGeneratedElectricity()) {
						max = he.getGeneratedElectricity();
					}

					sum = sum + he.getGeneratedElectricity();
				}

				de.setMin(min);
				de.setMax(max);
				de.setSum(sum);
				de.setAverage(Double.valueOf(sum / listsize));
				dailyElectricityForPanel.add(de);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return ResponseEntity.ok(dailyElectricityForPanel);
	}
}