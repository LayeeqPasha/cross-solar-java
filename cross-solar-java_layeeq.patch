From db1e779afd44e98ef6532f918c2022a18ab9ba28 Mon Sep 17 00:00:00 2001
From: Layeeq Pasha Syed <melayeeq@gmail.com>
Date: Sun, 19 Aug 2018 19:01:45 +1000
Subject: [PATCH] My submission
XOV: XO_0_0_1

---
 gradlew                                            |   0
 .../techtrial/controller/PanelController.java      | 236 +++++++++++++++------
 .../exceptions/GlobalExceptionHandler.java         |   0
 .../techtrial/model/HourlyElectricity.java         |  22 +-
 src/main/resources/application.properties          |   2 +-
 .../resources/db/changelog/db.changelog-1.0.xml    |   0
 .../resources/db/changelog/db.changelog-master.xml |   0
 .../techtrial/controller/PanelControllerTest.java  |   7 +-
 8 files changed, 195 insertions(+), 72 deletions(-)
 mode change 100755 => 100644 gradlew
 mode change 100755 => 100644 src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-1.0.xml
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-master.xml

diff --git a/gradlew b/gradlew
old mode 100755
new mode 100644
diff --git a/src/main/java/com/crossover/techtrial/controller/PanelController.java b/src/main/java/com/crossover/techtrial/controller/PanelController.java
index d308f18..d134bb8 100644
--- a/src/main/java/com/crossover/techtrial/controller/PanelController.java
+++ b/src/main/java/com/crossover/techtrial/controller/PanelController.java
@@ -5,8 +5,16 @@ import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
 import com.crossover.techtrial.service.HourlyElectricityService;
 import com.crossover.techtrial.service.PanelService;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
 import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
@@ -20,6 +28,7 @@ import org.springframework.web.bind.annotation.RestController;
 
 /**
  * Panel Controller for all Rest APIs related to Panel.
+ * 
  * @author Crossover
  *
  */
@@ -27,69 +36,166 @@ import org.springframework.web.bind.annotation.RestController;
 @RestController
 public class PanelController {
 
-  @Autowired
-  PanelService panelService;
-  
-  @Autowired
-  HourlyElectricityService hourlyElectricityService;
-  
-  /**
-   * Register a Panel to System and start receiving the electricity statistics.
-   * @param panel to register.
-   * @return
-   */
-  @PostMapping(path = "/api/register")
-  public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {
-    panelService.register(panel);
-    return  ResponseEntity.accepted().build();
-  }
-  
-  /**
-   * Controller Method to save hourly Electricity to Database. 
-   * @param panelSerial Serial number of Panel.
-   * @param hourlyElectricity  generated electricity for this panel.
-   * @return
-   */
-  
-  @PostMapping(path = "/api/panels/{panel-serial}/hourly")
-  public ResponseEntity<?> saveHourlyElectricity(
-      @PathVariable(value = "panel-serial") String panelSerial, 
-      @RequestBody HourlyElectricity hourlyElectricity) {
-    return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
-  }
-   
-  /**
-   * Get Hourly Electricity from Previous dates.
-   */
-  
-  @GetMapping(path = "/api/panels/{panel-serial}/hourly")
-  public ResponseEntity<?> hourlyElectricity(
-      @PathVariable(value = "banel-serial") String panelSerial,
-      @PageableDefault(size = 5,value = 0) Pageable pageable) {
-    Panel panel = panelService.findBySerial(panelSerial);
-    if (panel == null) {
-      return ResponseEntity.notFound().build(); 
-    }
-    Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(
-        panel.getId(), pageable);
-    return ResponseEntity.ok(page);
-  }
-  
-  /**
-   * This end point is used by Front end charts component to plot the daily statistics of 
-   * electricity generated by this Panel from the day it registered to end of previous day.
-   * @param panelSerial is unique serial for this Panel.
-   * @return
-   */
-  
-  @GetMapping(path = "/api/panels/{panel-serial}/daily")
-  public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
-      @PathVariable(value = "panel-serial") String panelSerial) {
-    List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
-    /**
-     * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
-     * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
-     */
-    return ResponseEntity.ok(dailyElectricityForPanel);
-  }
+	@Autowired
+	PanelService panelService;
+
+	@Autowired
+	HourlyElectricityService hourlyElectricityService;
+
+	/**
+	 * Register a Panel to System and start receiving the electricity statistics.
+	 * 
+	 * @param panel
+	 *            to register.
+	 * @return
+	 */
+	@PostMapping(path = "/api/register")
+	public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {
+		panelService.register(panel);
+		return ResponseEntity.accepted().build();
+	}
+
+	/**
+	 * Controller Method to save hourly Electricity to Database.
+	 * 
+	 * @param panelSerial
+	 *            Serial number of Panel.
+	 * @param hourlyElectricity
+	 *            generated electricity for this panel.
+	 * @return
+	 */
+
+	@PostMapping(path = "/api/panels/{panel-serial}/hourly")
+	public ResponseEntity<?> saveHourlyElectricity(@PathVariable(value = "panel-serial") String panelSerial,
+			@RequestBody HourlyElectricity hourlyElectricity) {
+
+		return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
+	}
+
+	/**
+	 * Get Hourly Electricity from Previous dates.
+	 */
+
+	@GetMapping(path = "/api/panels/{panel-serial}/hourly")
+	public ResponseEntity<?> hourlyElectricity(@PathVariable(value = "panel-serial") String panelSerial,
+			@PageableDefault(size = 5, value = 0) Pageable pageable) {
+		Panel panel = panelService.findBySerial(panelSerial);
+		if (panel == null) {
+			return ResponseEntity.notFound().build();
+		}
+
+		Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(panel.getId(),
+				pageable);
+
+		return ResponseEntity.ok(page);
+	}
+
+	/**
+	 * This end point is used by Front end charts component to plot the daily
+	 * statistics of electricity generated by this Panel from the day it registered
+	 * to end of previous day.
+	 * 
+	 * @param panelSerial
+	 *            is unique serial for this Panel.
+	 * @return
+	 */
+
+	@GetMapping(path = "/api/panels/{panel-serial}/daily")
+	public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
+			@PathVariable(value = "panel-serial") String panelSerial
+			) {
+		List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
+		try {
+			/**
+			 * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED
+			 * CLASSES. MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO
+			 * PAGINATION IS NEEDED HERE.
+			 */
+
+			//  
+			
+			Pageable pageable  = null;
+
+			Panel panel = panelService.findBySerial(panelSerial);
+			if (panel == null) {
+				return ResponseEntity.notFound().build();
+			}
+
+			Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(panel.getId(),
+					pageable);
+			Map<LocalDate, List> hourlyElecMap = new HashMap<>();
+
+			Iterator hourlyElectricityList = page.iterator();
+			while (hourlyElectricityList.hasNext()) {
+				HourlyElectricity he = (HourlyElectricity) hourlyElectricityList.next();
+
+				LocalDateTime today = LocalDateTime.of(LocalDate.now(), LocalTime.now());
+
+				int dayDiff = today.getDayOfYear() - he.getReadingAt().getDayOfYear();
+
+				if (dayDiff > 1) {
+					if (hourlyElecMap.size() > 0 && hourlyElecMap.get(he.getReadingAt().toLocalDate()) != null) {
+						List<HourlyElectricity> hourlyElecDayList = hourlyElecMap.get(he.getReadingAt().toLocalDate());
+						hourlyElecDayList.add(he);
+
+						hourlyElecMap.put(he.getReadingAt().toLocalDate(), hourlyElecDayList);
+
+					} else if (hourlyElecMap.size() == 0 || hourlyElecMap.size() > 0) {
+						List<HourlyElectricity> hourlyElecDayList = new ArrayList();
+						hourlyElecDayList.add(he);
+
+						hourlyElecMap.put(he.getReadingAt().toLocalDate(), hourlyElecDayList);
+					}
+
+				}
+			}
+
+			// Iterate through hourlyElecMap to find avg, sum, min , max
+
+			Iterator<Map.Entry<LocalDate, List>> iterator = hourlyElecMap.entrySet().iterator();
+			while (iterator.hasNext()) {
+
+				Map.Entry<LocalDate, List> entry = iterator.next();
+				List hourlyElecDayList = entry.getValue();
+				DailyElectricity de = new DailyElectricity();
+				de.setDate(entry.getKey());
+
+				Iterator hourElecListIter = hourlyElecDayList.iterator();
+				int listsize = 0;
+				long min = 0;
+				long max = 0;
+				long sum = 0;
+
+				listsize = hourlyElecDayList.size();
+
+				while (hourElecListIter.hasNext()) {
+					HourlyElectricity he = (HourlyElectricity) hourElecListIter.next();
+
+					if (min == 0) {
+						min = he.getGeneratedElectricity();
+					} else if (min > he.getGeneratedElectricity()) {
+						min = he.getGeneratedElectricity();
+					}
+
+					if (max == 0) {
+						max = he.getGeneratedElectricity();
+					} else if (max < he.getGeneratedElectricity()) {
+						max = he.getGeneratedElectricity();
+					}
+
+					sum = sum + he.getGeneratedElectricity();
+				}
+
+				de.setMin(min);
+				de.setMax(max);
+				de.setSum(sum);
+				de.setAverage(Double.valueOf(sum / listsize));
+				dailyElectricityForPanel.add(de);
+			}
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+
+		return ResponseEntity.ok(dailyElectricityForPanel);
+	}
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
old mode 100755
new mode 100644
diff --git a/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java b/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
index 275f765..b097b02 100644
--- a/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
+++ b/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
@@ -30,12 +30,16 @@ public class HourlyElectricity implements Serializable {
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   Long id;
   
+  /*
   @JsonIgnore
   @ManyToOne
   @JoinColumn(name = "panel_id", referencedColumnName = "id")
-  Panel panel;
+  Panel panel; */
   
-  @Column(name = "generated_electricity")
+  @Column(name = "panel_id")
+  Long panelId;
+
+@Column(name = "generated_electricity")
   Long generatedElectricity;
   
   @Column(name = "reading_at")
@@ -49,13 +53,21 @@ public class HourlyElectricity implements Serializable {
     this.id = id;
   }
 
-  public Panel getPanel() {
+ /* public Panel getPanel() {
     return panel;
   }
 
   public void setPanel(Panel panel) {
     this.panel = panel;
-  }
+  } */
+  
+  public Long getPanelId() {
+		return panelId;
+	}
+
+	public void setPanelId(Long panelId) {
+		this.panelId = panelId;
+	}
 
   public Long getGeneratedElectricity() {
     return generatedElectricity;
@@ -122,7 +134,7 @@ public class HourlyElectricity implements Serializable {
    */
   @Override
   public String toString() {
-    return "HourlyElectricity [id=" + id + ", panel=" + panel + ", generatedElectricity="
+    return "HourlyElectricity [id=" + id + ", panelId=" + panelId + ", generatedElectricity="
         + generatedElectricity + ", readingAt=" + readingAt + "]";
   }
   
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index c7cc890..db7e42e 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -2,7 +2,7 @@
 #Database connection Parameters
 spring.datasource.url: jdbc:mysql://localhost:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false
 spring.datasource.username=root
-spring.datasource.password=
+spring.datasource.password=newrootpassword
 spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 
 spring.jpa.hibernate.ddl-auto=none
diff --git a/src/main/resources/db/changelog/db.changelog-1.0.xml b/src/main/resources/db/changelog/db.changelog-1.0.xml
old mode 100755
new mode 100644
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
old mode 100755
new mode 100644
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
index a1deacf..62e485c 100644
--- a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
@@ -1,6 +1,10 @@
 package com.crossover.techtrial.controller;
 
+import com.crossover.techtrial.dto.DailyElectricity;
 import com.crossover.techtrial.model.Panel;
+
+import java.util.List;
+
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -50,9 +54,10 @@ public class PanelControllerTest {
             + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
     ResponseEntity<Panel> response = template.postForEntity(
         "/api/register", panel, Panel.class);
+    
     Assert.assertEquals(202,response.getStatusCode().value());
   }
-
+  
   private HttpEntity<Object> getHttpEntity(Object body) {
     HttpHeaders headers = new HttpHeaders();
     headers.setContentType(MediaType.APPLICATION_JSON);
-- 
2.16.2.windows.1

